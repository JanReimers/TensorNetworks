sudo modprobe -r rt2800pci;sudo modprobe rt2800pci nohwcrypt=1

Next steps:
    -Try wave function optimization for improve iTEBD GS energies.  Get them closer to mp-toolkit results?
    -Try coding up iTEBD using iTensor library
        -Start with one site TI model
        -Do we get the same issues?
    -Sort out iMPOS
        -Study Parker
            Local Matrix Product Operators: Canonical Form, Compression, & Control Theory
            Efficient simulation of moire materials using the density matrix renormalization group appendix
        -Create iMPOs directly, get rid of the convert method.
        -Code up  MPO compression as per Parker
        -Code up iMPO compression as per Parker.
        -<E2> is not working, MPO get compressed to 1x4 - 4x1.  We need to learn how contract
         a Dw x Dw - Dw x Dw open MPO with eigen vectors to get <E2>.
        -We need to be able to add (rather than combine) MPOs to do:
            S_1*S_2 = 0.5*(Sp_1*sm_2 + Sm_1*sp_2) + Sz_1+Sz_2
    -Understand trotter gates better
        -schachenmayer_diploma_thesis
        -Higher-order methods for simulations on quantum computers
        -MP toolkit uses Optimized 4th order 11-term decomposition.  What is that?
    -Code up environment recycling
        Start with transverse Ising model as that only needs one site.
        Complicated enough for one site unit cell, see notes.
        Strategy for two sites is probably to make a two site gate.
    -UI work
        Done: 1) Get python interfaces working again
        2) Run in JupyterLab notebook
        3) Get a matplotlib graph running
        4) Plot something with Maya
        5) Figure best way to get data from C++ to matplotling AND Maya
        6) Can python Panel help
    -Variational methods for iMPS
        VUMPS: 2018-VUMPS-1Dand2D.pdf
            -Add to notes
            -Try coding

-iTEBD
    issues:
        1) <E2> doesn't work. Maybe McCulloch's recursive expectation is needed.
        2) Trotter 2nd and fourth order iMPOs behave exactly like first order.
            Simple compression is possibly pushing important info to edges where it gets cutoff.
        3) All energies are in the ball park but too low compared to mp-toolkit. Maybe <E> is also wrong?
        4) TestApplyiMPOIdentity always fails.  OrthonormalizeI bails because Vl is singular.  Gets 4/8 zero
           eigen values.
    -Can we generalize GetExpectation to MPOs with arbitrary L?
    -Calculate fidelity

    -Figure out hanging TEBD tests.
    -TEBD and variational GS: converge on delta lambdas?
    -Handle Debug and Release modes for PyTensorNetworks.so
    -Figure out how to handle std::ostream when using SIP to interface with python.

    -Refactor:
        Code duplication in SVCompressorImp.C
        Too many Apply and Orthogonalize functions.  Issues:
            OrthogonalizeI requires maxIter and eps for convergence,
            Orthogonalize could use epsEigen, epsV, epsSVD, epsO
        What does FindGroundState need?
            Apply(iMPO) for fast iterations
            ApplyOrtho(iMPO,eps,niter) for low precision iterations
            OrthogonalizeI() before calling GetExpectation(H)
        What do UnitTests need?
            All of the above, plus:
            Apply(Matrix4CT)
            Orthogonalize()  //Slow but nice to have around for checking things
            GetOrthonormalityErrors()
            GetOverlap(Psi), cross overlap

    -FOr efficiency check Omn or expH for zero, before contracting it.
        CompressionError is usually called TruncationError

    -Still getting noise about norm errors in Utests.

-Refactor: MPO_SpatialTrotter takes Hlocal, should work from H or expH.  Right now it duplicates code
    for calculating expH.
-Logging: only LogInfoV does indenting
-Save wave functions to disk.
-Investigate sweep directions for normalization
-Improve level two logging for variational ground states
-Prime eigen solver -44 error.
- LinAlg solvers
    Options for largest or smallest evs
    Why is primme so slow
    Why is primme not converging well for non-sym matrices
    Make more general Normal matrices for prime, U*e*U_dagger where e is diagonal complex
        This might solve primmes not converging issues.
- Try to use the factory more in all testing classes
- clean up SpinCalculator
- Optimization: Learn about OpenMP, try it on a hot loop.
- Optimization: Learn about preconditioning, does that help with primme eigen solver?
- Optimization: FullStateImp<T>::DoHContraction  needs to do vector copies.
    We can avoid this by allowing Vector<T>(T*) constructors
        Be careful with the # if owners so we don delete T*
- MTrace calculation in MPSImp::Sweep(Direction lr,const MPS* Psi2) still doesn't work.
- Add some EXPECTS for iTensor tests.
- Reorg : Operators goes under Imp folder
    Create State under imp folder
- The freeze idea didn;t work because normalization is current sweeping through the frozen Site
    If we freeze site one, then left normalization needs to start at site 2
    and the right sweeps we need to stop at site two since we can;t SVD transfer to site 1.
- Profile iTime GS search, see if we need to optimize some contractions.
- Spin space trotter decomp
- Play with iTensor for 2D systems.
    -Done Try one tetrahedon.
    -Try iPEPS with iTEBD GS and Corner transfer matrix for contractions.

Backburner:
- Possibly fixed: Heisenbug trap in MPSSite_Contractions.C line ~354 can be removed after enough test time (discovered 13 Oct 2020)
- Right now SVMPOCompressor is unused. Do we need a different policy for MPOs? If not remove SVMPOCompressor
- Move multiplotable back to Plotting
    -Pulled out of CB projects for now
- Convergence Schedule Both methods might benifit from Hamiltonian parameter variations.  For example
        -Jxy  Turn these on gradually to find GS, Hamiltonian nees to supply a list paramater names and ranges.
        -Jz
        -Might need to identify parameters with strings "Jxy"

----------------------------------------------------------------------------------------------------------
    Done: Make abstract interfaces for SVD and eigen
    Done: Do left and right Evs for non sym
    Done: Add Lapack non sym routines
- Done: Valgrind issues:
    Who owns Loggers?  Use rcptr?
    Make a global variable that always has something as a logger.
    Done: -Use the name CompressionError consistently.
    Done: -Should epsOrth drop and espE and dt drop?
-Done: Profiling
	TestITimeSecondOrderTrotter_EpsLimitedCompression
	oml_CSVDecomp used 29.8% 2.97 sec

- Done: Try CSVD from LaPack and Primme
    -Lapack takes SVD out of the top 25 fr CPU
    -Some contractions MPSSite::IterateLeft_F, IterateLeft_R, ContractLRM
        need optimization
    SVDtransfer takes 28% of the cpu time

    Done: -Make a null logger if the user doesn't make one.
    Done: -Just pass epsE etc to full state, forget itsched.
    Done: -FullState->FindGS seems to return zero instead of E.
    Fixed: -TEBD  <E^2>-<E>^2 in log is wrong.
    Done: -Get spdlogger from Factor to we don't need to include the header.



 -iTEBD
     Done: -Recursion expectation
        DOne: -Look at Infinite boundary conditions for MPS calculations
- Done: Infinite methods iMPS, iTEBD, iDMRG
    -iMPS class with small unit cell
        -calculate largest EV of transfer matrix, use that to normalize.
        -THen what??
            See McCUllough Infnite boundary conditions for matrix product state calculations For
            calculation of L/R eigen vectors
    -iTEBD reasonably straight forward.
            Requires the Vidal lambda-Gamma-Lambda canonical forms with singular values
            stored on the bonds.
            Can we reuse the MPS class for this?  All contractions need to be modified to incorporate
            the SVs from the bonds.
   Countermeasures:
        Done: -Implement transverse Ising model with one site unit cell.
            Need to make one site gates to do iTime iterations to get GS.
        Done: -Implement McCulloch's recursion for expectations, for one site unit cell
        Done: -Implement McCulloch's recursion for expectations, for two unit cell
            Done:-Contract MPO horizontally to get a unit cell W which is still DwxDw on internal indices
             but d^n x d^n on physic indices
        Fixed: -McCulloch's recursion for expectations gives the wrong number. Why?
        Done: -Support QR decomp from Lapack.
        Done: -Try and hand code 2nd order trotter with gates.

    -Tidy up or ra-factor iTEBD before moving on
        Done: Currently we can iterate with MPO, iMPO, gateList, or expH matrix.  We need a separately coded version
              of iTEBDStateImp::FindiTimeGroundState.
              What can we do with virtual dispatch to select the type of iterations?
        Done -Re-org TensorNetworksImp folder. SUbfolders:
            Hamiltonians
            iTEBD
            MPS



    Done:-Decide convergence based on SV spectrum (lambda A or B), instead of E.
    Done:-Support Apply(MPO*)
        -Use trotter 1st, 2nd and 4rth order MPO instead of expH.
        Do we run into the same problem as with <E2>?
            Yes !!!!  We need an iMPO class
    -Done: Lookup theory for iMPO and add to notes if needed.
    Won;t do:  -Make and iTimeGroundState abstract base class to handle iterations.
        I think this is a failed idea.  The iterations are fundamentally different right now.
            Just look at MPSImp::FindiTimeGroundState(const Hamiltonian* H,const IterationScheduleLine&);
    Done: -Make a global logger
    Done: -Use Factor and EigenMatrix functions
    Done: -Fix up logging.  Add warnings.
    Done: -Add environment recycling into the Lyx notes.
    Done: -Log ortho error.
    -Refactor:
        Done: -Too many GetTransferMatrix functions
        Done: -Use TestOrtho for checking orthogonality
    -Convergence
        Done -restore dE>0 break
    Done: -Test S*S operator for energy.
    Done: -Implement iterative orthogonality method.
    Done: -Do normalization inside Orthogonal
    Fixed: Dunno why?!-Try and get rid off ambiguous op overload warnings.
    Done: -Stop checking orthogonality everywhere, just report it
    Done: -Optimize GetExpectation functions, assumes orthonormality
    Done: -Where to put Sv normalization
        Inside Bond.C
        after each SVD call?
    Done: -Make a FindGroundState function in iTEBDState.H
    Done: -Use the unpack function
    Done: -Move overloaded op* functions the appropriate headers.
    Done: -Bond.C don't overwrite SVerror
    Done: -Store sqrt(s*s) for SV error.

- Done: Get rid of OperatorWRepresentation, or find a better name.
- Done: Get rid of operator base class and MPO_*
    -All MPOs stored the full lattice, possibly with lots of identity ops then everything would be much simpler.
- Done: Bond.C line 70 has a hard coded limit for SVs
    Should be using itsMPSCompressEpsilon
- Done: Fix MPS*  Apply       (const Operator* o) const;
    Moved to MPS base class
- Done: The purpose of MPSImp itsDmax is becoming murky, what does it mean?
    int particular if do MPO*|MPS> where MPO has some DwMax then newDmax=DwMax*itsDmax
    But what are we supposed to use newDmax for
    Its is currently used for:
        -Init sites and bonds
        -Setting canonical bond dimensions.
        -D increase loops in Var GS search
        -MPS*  MPSImp::Apply(const Operator* o) const
        -void iTEBDStateImp::Apply(int isite,const Matrix4RT& expH)
- Done: Get rid of SetCanonicalBondDimensions
- Done: Get rid of SiteMessage
- Done: Try and get wave function optimization convergence working
- Done: Add an iTime test the is epsSv limited
- Done: Right now PrimeEigenSolver depends in FullStateImp, can be break this somewhow?
- Done: Forward declare instead of include in Imp/Typedefs.H
- Done: Tidy up test names
    -SVDTesting should be LinAlgebraTesting
    Not Possible: -Prefix with numbers or somehow tell gtest the run order
        The seem to run an alphabetical order because of CB ordering that way, But we cannot rely on this
- Done: Make unit tests faster (target < minutes).
    Make a new target ReleaseLong for all the slow tests
- Done: Fix MPS::Report columns
    why are they empty sometimes?
- Done: ExactDiagTesting make FullState member
- Done: Why use and Array instead of Vector for FullState?
- Done replace eType with a better name, same length as double.
- Done: Make a CheckHalfInteger function for S
- Done: Imaginary checks in GetOverlap should /itsL^2, warning shows up in Imaginary time testing
- Done: Replace SVDecomp (U,s,V) in MPO_SpatialTrotter.C
- Done: MPO should use SVCompressorR instead Dmax, eps
    Support Dmax, eps as well for user convenience
- What is the purpose of an operator that is not an MPO?
    -Operator has no Combine or Compress capability as both of these functions
     require a full lattice of site operators to make sense.
- Not Worth it: Clean up OneSiteDMs and TwositeDMs to just show an interface.
- Done: Put all TNS classes in the TNS namespace so we dont have prefix all types and enums
    - Done:Use namespace.H for all forward declarations
- Done:  Clean up normalize interfaces.  use NULL compressor to indicate no compression.
    -Only provide two version and the abstract interface level.
    -NormalizeAndCompress should return error.
- Done: Refactor: separate all plotting code in MPSImp and MPState
    The tricky part here is that MPS interface inherits from MultiPlotable
    So we need split that off and have MPS with no plotting and MPSWithPlotting
- Done: Refactor: Have SVD routines return Vdagger instead of V
- Done: Make ab SVDCompress interface.  Derived classes can implement different policies doe deciding which Svs to throw awat etc.
    - Done: Refactor: Normalize and NormalizeAndCompress should be merged  DMax=0, eps=0 means no compress?
- Done Refactor: Use multiple return values for PRIMME and LApack SVD.
- Done Integrate spdlogger as one derived imp for TNSLogger
    -UNfortunately we can't' use spdlogger advanced formatting when wrapping through an abs interface
     spd uses variadic templates instead of the old C variadic arguments framework, which means
     everything needs to be inline.
- Done Refactor: if a complex matrix is MatrixCT then a real matrix should MatrixRT
- Done Add deltaD to interation schedule and using when increment D in GS searches.
- Done: Refactor: Bonds store SVs in a zero based Array. Change to 1 based vector
- Done We need a convenient way to do contractions over singular values using OML Matrix
- Done Split up mega files MSPImp.C and MPSSite.C
- Should non hermition operator have distinct type?
    Not clear how to go about this.
    Do we really need separate Operator and MPO interfaces?
- Done Support dynamic tuning of D in iteration schedule.
    -If D jumps from 4 to 8 do increments by 1''s or jump directly?
    -If jump directly the user needs fill in lots of IterationScheduleLine's
    -Or may IterationSchedule. Insert can detect this and auto insert lines
        -This my surprise users.
- Done Only calculate <E2>-<E>2 after end of it sched
- Done Take out support for two operator contractions.  Now that we can combine and compress MPOs we don;t need it for <E^2>.
- Done IterationScheduleLine make abridged constructors for variation and iTime.
- Done Rename LRPSupervisor TNSLogger
- Done mpsImp line 372   GetEOLeft_Iterate(h,1,true);  //This does nothing because of the 1 ???
- Done Does MPSImp need an Epsilons member?
    NOt really it only uses itsNormalizationEpsilon
- Done Move TNSLogger to MPS constructor so we don't have to pollute the function signatures with it
- Dont calculate <E^2>-<E>^2 for each IterationScheduleLine.
- Done GetNormStat(isite) should return a char, keep # iterations separate.
- Done Support iterations schedule for variational GS search
-Done Convergence schedule,  increase D, drop epsilons, drop tau for imaginary time evolution
    -Can we use one schedule for 1) variational and 2) imaginary time GS searches?
    - Variational needs: Eps.DE, Eps.Eigen, Eps.<E^2>-<E>^2 NIter, Dmax
    - Imag t needs: Eps.DE, Eps ||Psi1-Psi2||^2, Eps.<E^2>-<E>^2, tau, Niter, Dmax
-Done Fix conventions for lattice site indexing, zero or one based?
    MPS is zero based, FullState is one based, LyX notes are one based
-Done Reconcile local Hilbert space dimension, using d in the Lyx doc and p in code.
-Done In code use M for matricies instead A
-Done Rename MPS to MPS to be consistent with MPO and save space
-Done Ham->CreateMPS should be a /Factory/ so py knows to delete it.
-Done Plot singular value spectrum,
-Done need a site selection sider like in coolfoil
-Done Refactor sweep left/right routines.  Tonnes of diplicated code in there.
    This took a whole day and three commits.
-Done Get rid of all S2's, just use double S everywhere.
-Figure out why S=1,L>5 has such poor convergence. We may need to count degeneracy of lowest SVs.
    -For L=5 D>=9 works, but that is the 2^L Hilbert space
    -For L=6 D=12 and D=27 works
    -For L=9 Hard to find a D that converges
    -These all work great if you slowly increment D.
Bugs:
    -log(DE) stops plotting L=6, S=1 D=?
    -Bond Entropy missing points L=6 D=?
    -Current task messages don;t always make sense, site number are often off by 1.
-Why Eigen values of Sus tensor <S^a*S^b>-<S^a>*<S^b> are not equal they always look like (e1,e1,e2) or (e1,e2,e2).
-Why optimize site 1, just leave it a |up> and take out global SU(2) invariance
    is this related to poor convergence for S>1/2 ??
    How to handle left or right normalization with a frozen spin?
-Why is dE~10e-15 for sites 1&2 on right sweep and sites L-1,L-2 on left sweep?
    is this related to poor convergence for S>1/2 ??
-Why does MPS compression convergence criteria (Sholwock page 132 yield wierd numbers)
-Valgrind, any memeory leaks?


-DOne Fresh checkout and build.
-Done Refactor operators into a separate folder.
-Done Calc <Sx> <Sy> <Sz>
    Done Could start by calculating one density matrices.  Then ops are easy
-Done Correlation functions <Sa*Sa+n>-<Sa>*<Sa+n>
    Done Extend to pair density matricies.  It would interesting to see the eigen values of distant
    pair DMs.  Do the lowest two EVs drop with distance, indicating decrreasing entanglement?
-Done Calc 1&2 site density matrices
    Done Start a new theory doc.
    Done Get refs working from DOIs (give up on JabRef)
    Done Write out diagrams and iterative formulas for 2 site density matrix.

-Done -Start a new cleaner lyx doc with tensor diagrams
    Done -Find a quite diagraming tool: LibreOfficeDraw seems to work.  However you can export whole pages
     as PNGs so one must then use ImageMagic to crop and separate the diagram.  Ho-hum
-Done Separate out contraction code in MPSite
-Done Get rid of old dumm-ass contraction code.
-Done Simplify rescale step in normalization
-Done Clean up GetDw interface.
-Done Use spin calculator in Heis Ham
-Done Mega classes MPState MPSite are too big, how split up responsibilities?
    Move some stuff into bond objects
    Partially DONE.  Made more stuff private at least.
-Done Give Lanczos an initial guess from previous iteration.
-Done Speed up <E^2> contractions, take advantage of W shapes.  Make Dw2 a function of w1.
    Before Implementation:
        <E^2> contraction for L=10, S=2.5, D=4 took 10.6321 seconds.
        <E^2> contraction for L=10, S=0.5, D=16 took 28.8432 seconds.
    After implementation:
        <E^2> contraction for L=10, S=2.5, D=4 took 2.66917 seconds.
        <E^2> contraction for L=10, S=0.5, D=16 took 6.41037 seconds.
    Further reduced by return referneces in GetW calls
        <E^2> contraction for L=10, S=2.5, D=4 took 0.916441 seconds.
        <E^2> contraction for L=10, S=0.5, D=16 took 3.01753 seconds.
    Put gates in to check for the more zero elements in W
        <E^2> contraction for L=10, S=2.5, D=4 took 0.076742 seconds.
        <E^2> contraction for L=10, S=0.5, D=16 took 0.660434 seconds.

    Cleaned up the last few W(n,m) multiplictions and ranges.  Now this is the hot loop
    SparseMatrix<std::complex<double> >::DoMVMultiplication

-Done Give eigen solver a good starting wavevector.

-Imag time evolution
-Periodic boundary conditions.  This is less useful than iMPS
-iMPS, iDMRG
-GUI using wxPython
    -What to show in screen?
        Lattice
        Vectors (Sx,Sy,Sz) project to 2D.
        Colours
            Site energy
            Bond entropy
            Normalization A,B,M
Done    Live Graphs
            E vs iter#
            Sigma(E)  vs iter#
            Bond entropy vs site#
            <S^2> vs site#
            <E> vs site#
            Rank & D vs site#
            Heff degeneracy vs site # (might be harder with lowest eigen value solvers)



DONE -S>1/2 in Hamiltonian.  SPeed is irrelevant here.
DONE -Keep intermediates when iterating L&R tensors for Heff.
DONE -Iterate function with delta(E) convergence
DONE -  Improve with <H^2>-<H>^2 convergence, You need converge in D for this to go to zero.
DONE -Show sparsisity (# non zero elements) in H_eff for each site.
DONE -Profile, where are we spending the most time?
DONE -Start using sparse eigen solver.  Used the PRIMME system.
Done Separate norm status widgets for each site, update singles
E/J plot for each site doesn't really work since the y range gets so tiny
    Done Fix some plots, plot dE vs site# on log scale
    Done Plot points instead of lines
    Does wxDrivet support log scales?
    Done Rank vs. site#
    Done Fix axis code to avoid scientific unless ymin=0 or ymax=0
Control panel
    Done Get restart working(have restart do what start does now, get rid of start, play nad step will start it)
    Done On startup Step should start the run
    Done Stop shoud kill the thread
Done Split the classes into separate files wxMPSFrame.py is getting too big.
Done Create Bond objects between sites.  Each site can see its left and right bond objects.
Done Fix alignments on Ham tab
Done Use eps values.




Expression template notes:
    C++-11 and C++-17 introduce a lot of language features that should expression
    template programming much easier.
    References:
        https://gieseanw.wordpress.com/2019/10/20/we-dont-need-no-stinking-expression-templates/
        https://stackoverflow.com/questions/11809052/expression-templates-and-c11
        https://baptiste-wicht.com/posts/2018/02/c%2B%2B17-migration-of-expression-templates-library-etl.html
        https://stackoverflow.com/questions/56261171/c-expression-templates-lifetime
    Recommended language feature to use:
        std:tuple
        auto return types
        auto parameter types
        argument dependent lookup => operator overloading without having a base class
            Putting expression classes into a namespace aids ADL
        lambda expression
        represent expressions as aggregate types
        noexcept to help optimizer
        ranged-for loop
